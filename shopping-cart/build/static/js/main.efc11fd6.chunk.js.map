{"version":3,"sources":["features/counter/Product/productSlice.js","features/counter/Cart/cartSlice.js","features/counter/Product/Product.js","features/counter/Cart/Cart.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["productSlice","createSlice","name","initialState","productItem","reducers","display","state","action","payload","actions","selectProduct","products","cartSlice","cartItem","addItem","newItem","foundItem","find","item","id","quantity","map","push","deleteItem","filter","selectCart","cart","Product","dispatch","useDispatch","useSelector","useEffect","axios","get","then","resp","data","className","class","length","form","style","backgroundImage","img","normal","isFreeShipping","title","currencyFormat","price","toString","split","toFixed","installments","onClick","Cart","useState","cartHidden","setCartHidden","total","reduce","a","b","src","thumb","alert","App","configureStore","reducer","productsReducer","cartReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efc11fd6.chunk.js","sourcesContent":["//Redux Toolkit Package: helping to manage states easyier by creating its own Slice of state\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios'\r\n\r\n\r\nexport const productSlice = createSlice({\r\n  name: 'products',\r\n  initialState: {\r\n    productItem: [],\r\n  },\r\n  reducers: {\r\n    display: (state, action) => {\r\n       state.productItem = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { display } = productSlice.actions;\r\n\r\n\r\nexport const getProduct =()=> (dispatch)=> { //import to Product.js\r\n   axios.get(\"http://localhost:3001/products\").then((resp)=>dispatch(display(resp.data)));\r\n\r\n};\r\n\r\nexport const selectProduct = (state) => state.products.productItem; //import to Product.js\r\n\r\nexport default productSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: {\r\n    cartItem: [],\r\n  },\r\n  reducers: {\r\n    addItem: (state, action) => {\r\n      // state.cartItem.push(action.payload);\r\n      const newItem = {...action.payload}\r\n      const foundItem = state.cartItem.find((item) => item.id == newItem.id)\r\n      if (foundItem) {\r\n        foundItem.quantity = foundItem.quantity + 1\r\n        state.cartItem = state.cartItem.map(item => item.id === foundItem.id ? foundItem : item)\r\n      } else {\r\n        state.cartItem.push({ ...newItem, quantity: 1 })\r\n      }\r\n    },\r\n    //delete by id or index\r\n    deleteItem: (state, action) => {\r\n      state.cartItem = state.cartItem.filter((item)=>item.id !== action.payload.id);\r\n    }\r\n  },\r\n});\r\n\r\n\r\nexport const { addItem, deleteItem } = cartSlice.actions;//import to Product.js\r\n\r\nexport const selectCart = state => state.cart.cartItem; //import state to cart.js\r\n\r\nexport default cartSlice.reducer; //import to store.js","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectProduct, getProduct} from './productSlice.js';\r\nimport { selectCart, addItem, deleteItem} from '../Cart/cartSlice.js';\r\n\r\nexport function Product() { //import to app.js\r\n  const dispatch = useDispatch();\r\n  const products = useSelector(selectProduct); //passed selectProducts as reference\r\n\r\n  useEffect(() =>{\r\n   dispatch(getProduct());\r\n   }, []);\r\n\r\n  return (\r\n   <div className=\"container\">\r\n      <div className=\"aside\">\r\n         <p className=\"sizeName\">Sizes:</p>\r\n         <div className=\"sizeTop\">\r\n            <button className=\"size\">XS</button>\r\n            <button className=\"size\">S</button>\r\n            <button className=\"size\">M</button>\r\n            <button className=\"size\">ML</button>\r\n         </div>\r\n          <button className=\"size\">L</button>\r\n          <button className=\"size\">XL</button>\r\n          <button className=\"size\">XXL </button>\r\n           <p className=\"review\">\r\n            Leave a star on Github if this repository was useful : {\")\"}\r\n          </p>\r\n         <div className=\"starBtn\">\r\n            <button className=\"star\">\r\n              <i class=\"fa fa-star-o\"></i> Star\r\n            </button>\r\n            <button className=\"likes\" >\r\n              1,513\r\n            </button>\r\n          </div>\r\n      </div>\r\n      <div className=\"productWrap\">\r\n         <div className=\"productName\">\r\n            <span>\r\n               {products.length} Product(s) found.\r\n            </span>\r\n            <span className=\"select\">Order by {\" \"}\r\n               <select className=\"dropDown\" form=\"carform\">\r\n               <option>Select</option>\r\n               <option>Lowest to Highest</option>\r\n               <option>Highest to Lowest</option>\r\n               </select>\r\n            </span>\r\n         </div>\r\n         <ul className=\"productList\">\r\n            {products.map((item) =>(\r\n         <li\r\n            style={{backgroundImage: `url(${item.img.normal})`}}\r\n            className=\"eachItem\">\r\n            <div>\r\n               {item.isFreeShipping ? \r\n               (<div className=\"free\"> Free shipping</div>) \r\n               : null}\r\n            </div>\r\n            <div className=\"productTitle\">{item.title}</div>\r\n            <hr />\r\n            <div>\r\n               <div className=\"productPrice\">\r\n               {item.currencyFormat}\r\n               <span className=\"dollars\">{item.price.toString().split('.')[0]}</span>\r\n               .{item.price.toFixed(2).toString().split('.')[1]}</div>\r\n               <div className=\"installment\">\r\n                  {item.installments ? (\r\n                  <span>Or {item.installments} x {item.currencyFormat}{ (item.price / item.installments).toFixed(2)}\r\n                  </span>\r\n                  ) :\"No installments\"}\r\n               </div>\r\n            </div>\r\n            <button \r\n            className=\"productBtn\" \r\n            onClick={() =>dispatch(addItem(item))}> \r\n            Add to cart\r\n            </button>\r\n         </li>\r\n         ))}\r\n         </ul>\r\n      </div>\r\n   </div>\r\n   )\r\n}","import React, {useState} from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport { selectCart, addItem, deleteItem} from \"./cartSlice.js\";\r\n// import { selectProduct, getProduct} from '../Product/productSlice.js';\r\n\r\n export function Cart() { //import to app.js\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(selectCart);\r\n    const [cartHidden, setCartHidden] = useState(true)\r\n\r\n    function handleClick() {\r\n      setCartHidden(false)\r\n      if (!cartHidden) {\r\n        setCartHidden(true) \r\n      }\r\n    }\r\n\r\n    function handleCheckout() {\r\n      alert(`Checkout - Subtotal: ${total}`)\r\n    }\r\n\r\n    const total = cart.reduce((a, b)=>a + b.price*b.quantity, 0).toFixed(2)\r\n\r\n   return (\r\n     <div>\r\n      <p className={cartHidden ? \"pickedOut\" : \"pickedIn\"}>{cart.length}</p>\r\n      <div className={!cartHidden ? \"showCart\" : \"hiddenCart\"}>\r\n        <div className=\"bagWrap\" onClick={handleClick}>\r\n          <button className='bag'>\r\n             {cartHidden ? \r\n               (<i class=\"fa fa-shopping-bag fa-2x\"></i>) \r\n               :(<i class=\"fa fa-close fa-2x\"></i>)}\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"cartContainer\">\r\n          <div className=\"cartHeading\"><i class=\"fa fa-shopping-bag\"></i> Cart</div>\r\n          <div>\r\n            <div>\r\n              {cart.map((item) => (\r\n                  <div className=\"cartInfo\">\r\n                \r\n                    <img className=\"cartImg\" src={item.img.thumb} />\r\n\r\n                   <div\r\n                      className=\"cartDelete\"\r\n\r\n                      onClick={() => dispatch(deleteItem(item))}\r\n                    >x</div> \r\n   \r\n                    <div className=\"details\">\r\n                      <p className=\"detailsTitle\">{item.title}</p>\r\n                      <p >{item.style}</p>\r\n                      <p>Quantity : {item.quantity} </p>\r\n                      <p>${(item.price * item.quantity).toFixed(2)}</p>\r\n                    </div>\r\n\r\n                    <div className=\"cartPrice\">\r\n                      <p>{item.currencyFormat}{item.price.toFixed(2)}</p>\r\n                      <div>\r\n                        <button className=\"cartBtns disabled\"><i class=\"fa fa-minus\"></i></button>{\" \"}\r\n                        <button className=\"cartBtns\" onClick={() =>dispatch(addItem(item))}><i class=\"fa fa-plus\"></i></button>{\" \"}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n            </div>\r\n            <p className=\"empty\">Add some products in the cart <br />\r\n              :{\")\"}\r\n            </p>\r\n          </div>\r\n\r\n         <div className=\"totalWrap\">\r\n            <div className=\"subtotal\">SUBTOTAL</div>\r\n            <div className=\"subtotalMoney\">\r\n              <p>${total}</p>\r\n            </div>\r\n            <button className=\"checkoutBtn\" onClick={handleCheckout} >CHECKOUT</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n  )\r\n}","import React from 'react';\r\nimport { Product } from './features/counter/Product/Product.js';\r\nimport { Cart } from './features/counter/Cart/Cart.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Product />\r\n      <Cart />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; //import to index.js\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n// import counterReducer from '../features/counter/counterSlice';\r\nimport productsReducer from '../features/counter/Product/productSlice';\r\nimport cartReducer from '../features/counter/Cart/cartSlice';\r\n\r\n//combining all reducers here\r\nexport default configureStore({\r\n  reducer: {\r\n    // counter: counterReducer,\r\n    products: productsReducer,\r\n    cart: cartReducer,\r\n\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}